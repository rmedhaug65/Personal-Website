{"version":3,"sources":["components/LocationMarker.js","components/LocationInfoBox.js","components/Map.js","components/spinner.gif","components/Loader.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","latitude","longitude","onClick","className","icon","locationIcon","LocationInfoBox","info","time","id","temperature","humidity","wind","winddirection","rain","Dap","eventData","center","zoom","useState","locationInfo","setLocationInfo","markers","map","ev","lat","parseFloat","lng","logtime","String","bootstrapURLKeys","key","process","defaultCenter","defaultZoom","defaultProps","Loader","src","spinner","alt","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","evt","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAWeA,EARQ,SAAC,GAAqC,EAAnCC,SAAmC,EAAzBC,UAA0B,IAAfC,EAAc,EAAdA,QAC3C,OACI,qBAAKC,UAAU,kBAAkBD,QAASA,EAA1C,SACI,cAAC,OAAD,CAAME,KAAMC,IAAcF,UAAU,qB,QCWjCG,G,MAjBS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACI,sBAAKJ,UAAU,gBAAf,UACI,sDACA,+BACR,wCAAU,mCAAUI,EAAKC,KAAf,UACV,sCAAQ,iCAAUD,EAAKE,QACvB,wCAAU,iCAAUF,EAAKG,iBACzB,4CAAc,iCAAUH,EAAKI,cAC7B,8CAAgB,iCAAUJ,EAAKK,UAC/B,kDAAoB,iCAAUL,EAAKM,mBACnC,wCAAU,iCAAUN,EAAKO,kBCLvBC,EAAM,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,KAAU,EACAC,mBAAS,MADT,mBACjCC,EADiC,KACnBC,EADmB,KAElCC,EAAUN,EAAUO,KAAI,SAAAC,GAI1B,OAAO,cAAC,EAAD,CAAgBC,IAAKC,WAAWF,EAAGxB,UAAW2B,IAAKD,WAAWF,EAAGvB,WACxEC,QAAS,kBAAMmB,EAAgB,CAAEb,KAAMgB,EAAGI,QAAQC,OAAO,QAAUpB,GAAIe,EAAGf,GAAIC,YAAac,EAAGd,YAAYmB,OAAO,MAAOlB,SAAUa,EAAGb,SAASkB,OAAO,KAAMjB,KAAMY,EAAGZ,KAAMC,cAAeW,EAAGX,cAAeC,KAAMU,EAAGV,aAGxN,OACI,sBAAKX,UAAU,MAAf,UACI,cAAC,IAAD,CACI2B,iBAAkB,CAAEC,IAAKC,2CACzBC,cAAgBhB,EAChBiB,YAAchB,EAHlB,SAKKI,IAEJF,GAAgB,cAAC,EAAD,CAAiBb,KAAMa,QAKpDL,EAAIoB,aAAe,CACflB,OAAQ,CACJQ,IAAK,SACLE,KAAM,UAEVT,KAAM,IAGKH,QCtCA,MAA0B,oCCW1BqB,EATA,WACX,OACI,sBAAKjC,UAAU,SAAf,UACI,qBAAKkC,IAAKC,EAASC,IAAI,YACvB,mD,MCuBGC,MAxBf,WAAgB,IAAD,EACqBrB,mBAAS,IAD9B,mBACNH,EADM,KACKyB,EADL,OAEiBtB,oBAAS,GAF1B,mBAENuB,EAFM,KAEGC,EAFH,KAiBb,OAbAC,qBAAU,YACS,uCAAG,8BAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAAMd,iFAFN,cAEZe,EAFY,gBAGAA,EAAIC,OAHJ,OAGZC,EAHY,OAKlBR,EAAaQ,GACbN,GAAW,GANO,2CAAH,qDASjBO,KACC,IAGD,8BACKR,EAA0C,cAAC,EAAD,IAAhC,cAAC,EAAD,CAAK1B,UAAWA,OCZpBmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5cecd1b6.chunk.js","sourcesContent":["import { Icon } from '@iconify/react'\nimport locationIcon from '@iconify/icons-mdi/thermometer'\n\nconst LocationMarker = ({ latitude, longitude, onClick }) => {\n    return (\n        <div className=\"location-marker\" onClick={onClick}>\n            <Icon icon={locationIcon} className=\"location-icon\" />\n        </div>\n    )\n}\n\nexport default LocationMarker\n","const LocationInfoBox = ({ info }) => {\n    return (\n        <div className=\"location-info\">\n            <h2>Weather Station Info</h2>\n            <ul>\n    <li>Time: <strong>{ info.time } </strong></li>\n    <li>ID: <strong>{ info.id }</strong></li>\n    <li>Temp: <strong>{ info.temperature }</strong></li>\n    <li>Humidity: <strong>{ info.humidity }</strong></li>\n    <li>Wind Speed: <strong>{ info.wind }</strong></li>\n    <li>Wind Direction: <strong>{ info.winddirection }</strong></li>\n    <li>Rain: <strong>{ info.rain }</strong></li>\n            </ul>\n        </div>\n    )\n}\n\nexport default LocationInfoBox\n","import { useState } from 'react'\nimport LocationMarker from './LocationMarker'\nimport GoogleMapReact from 'google-map-react'\nimport { isCompositeComponentWithType, mockComponent } from 'react-dom/test-utils'\nimport LocationInfoBox from './LocationInfoBox'\n\nconst Dap = ({ eventData, center, zoom}) => {\n    const [locationInfo, setLocationInfo] = useState(null)\n    const markers = eventData.map(ev => {\n        // const newdate = new Date()\n        // const olddate = new Date(ev.logtime)\n        // const diff = Math.abs(newdate - olddate) / (1000 * 60);\n        return <LocationMarker lat={parseFloat(ev.latitude)} lng={parseFloat(ev.longitude)} \n        onClick={() => setLocationInfo({ time: ev.logtime+String(' UTC') , id: ev.id, temperature: ev.temperature+String(' F'), humidity: ev.humidity+String('%'), wind: ev.wind, winddirection: ev.winddirection, rain: ev.rain})} />\n    })  \n\n    return (\n        <div className=\"map\">\n            <GoogleMapReact\n                bootstrapURLKeys={{ key: process.env.REACT_APP_GoogleMapAPIKey }}\n                defaultCenter={ center }\n                defaultZoom={ zoom }\n            >\n                {markers}\n            </GoogleMapReact>\n            {locationInfo && <LocationInfoBox info={locationInfo} />}\n        </div>\n    )\n}\n\nDap.defaultProps = {\n    center: {\n        lat: 44.97974,\n        lng: -93.26901\n    },\n    zoom: 14\n}\n\nexport default Dap\n","export default __webpack_public_path__ + \"static/media/spinner.372b42cf.gif\";","import spinner from './spinner.gif'\n\nconst Loader = () => {\n    return (\n        <div className=\"loader\">\n            <img src={spinner} alt=\"Loading\" />\n            <h1>Fetching Data</h1>\n        </div>\n    )\n}\n\nexport default Loader\n","import { useState, useEffect } from 'react'\nimport Dap from './components/Map'\nimport Loader from './components/Loader'\nimport Header from './components/Header'\n\nfunction App() {\n  const [eventData, setEventData] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true)\n      const res = await fetch(process.env.REACT_APP_APIEndPoint)\n      const evt = await res.json()\n\n      setEventData(evt)\n      setLoading(false)\n    }\n\n    fetchEvents()\n  }, [])\n\n  return (\n    <div>\n      { !loading ? <Dap eventData={eventData} /> : <Loader /> }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}